#include <WiFi.h>
#include <PubSubClient.h>
#include <DHT.h>

#define DHTPIN 15
#define DHTTYPE DHT22

const char* ssid = "Mark";
const char* password = "11111111";
const char* mqttServer = "broker.hivemq.com";
const int mqttPort = 1883;
const char* mqttTopicTemperature = "sensor/temp";
const char* mqttTopicHumidity = "sensor/humi";

// กำหนดพินที่ใช้สำหรับปุ่มกด
const int buttonPin1 = 4;  // ปุ่มแรก
const int buttonPin2 = 16; // ปุ่มที่สอง

WiFiClient espClient;
PubSubClient client(espClient);
DHT dht(DHTPIN, DHTTYPE);

void setup() {
  Serial.begin(115200);
  
  // กำหนดพินต่างๆ
  pinMode(21, OUTPUT);  // LED สีแดง
  pinMode(22, OUTPUT);  // LED สีเหลือง
  pinMode(23, OUTPUT);  // LED สีเขียว
  pinMode(2, OUTPUT);   // พอร์ตไฟที่ควบคุม
  pinMode(buttonPin1, INPUT_PULLUP); // ตั้งปุ่มแรกเป็นอินพุต
  pinMode(buttonPin2, INPUT_PULLUP); // ตั้งปุ่มที่สองเป็นอินพุต
  
  digitalWrite(2, LOW); // ตั้งค่าเริ่มต้นให้ไฟดับ
  
  setup_wifi();
  
  // กำหนดการเชื่อมต่อ MQTT
  client.setServer(mqttServer, mqttPort);
  client.setCallback(callback);
  
  dht.begin();
}

void loop() {
  if (!client.connected()) {
    reconnect();
  }
  client.loop();
  
  // อ่านค่าอุณหภูมิและความชื้น
  float temp = dht.readTemperature();
  float humi = dht.readHumidity();

  if (isnan(temp) || isnan(humi)) {
    Serial.println("Failed to read from DHT sensor!");
    return;
  }

  // ส่งข้อมูลอุณหภูมิและความชื้นไปยัง MQTT
  char temperatureString[6];
  dtostrf(temp, 5, 2, temperatureString);
  client.publish(mqttTopicTemperature, temperatureString);

  char humidityString[6];
  dtostrf(humi, 5, 2, humidityString);
  client.publish(mqttTopicHumidity, humidityString);

  // เช็คสถานะของปุ่มกด
  if (digitalRead(buttonPin1) == LOW) {  // เมื่อกดปุ่มแรก
    digitalWrite(2, HIGH);  // ไฟติด
    Serial.println("Button 1 pressed: LED ON");
    client.publish("toa/led", "1");
  } else if (digitalRead(buttonPin2) == LOW) {  // เมื่อกดปุ่มที่สอง
    digitalWrite(2, LOW);  // ไฟดับ
    Serial.println("Button 2 pressed: LED OFF");
    client.publish("toa/led", "0");
  }

  // เงื่อนไขการควบคุม LED ตามอุณหภูมิ
  if (digitalRead(2) == HIGH) {  // ถ้าไฟพอร์ต 2 เปิด (digitalWrite(2, 1))
    if (temp > 30) {
      digitalWrite(21, HIGH);  // เปิด LED สีแดงสำหรับอุณหภูมิ > 30
      digitalWrite(22, LOW);   // ปิด LED สีเหลือง
      digitalWrite(23, LOW);   // ปิด LED สีเขียว
      Serial.println("R");     // แสดงผลใน Serial Monitor
      //client.publish("toa/led", "0");
    } else if (temp >= 25) {
      digitalWrite(22, HIGH);  // เปิด LED สีเหลืองสำหรับอุณหภูมิ >= 25 และ <= 30
      digitalWrite(21, LOW);   // ปิด LED สีแดง
      digitalWrite(23, LOW);   // ปิด LED สีเขียว
      Serial.println("Y");     // แสดงผลใน Serial Monitor
      //client.publish("toa/led", "1");
    } else if (temp < 25) {
      digitalWrite(23, HIGH);  // เปิด LED สีเขียวสำหรับอุณหภูมิ < 25
      digitalWrite(21, LOW);   // ปิด LED สีแดง
      digitalWrite(22, LOW);   // ปิด LED สีเหลือง
      Serial.println("G");     // แสดงผลใน Serial Monitor
      //client.publish("toa/led", "2");
    }
  } else {  // ถ้าไฟพอร์ต 2 ปิด (digitalWrite(2, 0))
    digitalWrite(21, LOW);  // ปิด LED สีแดง
    digitalWrite(22, LOW);  // ปิด LED สีเหลือง
    digitalWrite(23, LOW);  // ปิด LED สีเขียว
    Serial.println("LED Off"); // แสดงผลใน Serial Monitor
    client.publish("toa/led", "3");
  }

  delay(2000);  // หน่วงเวลา 2 วินาที
}

void setup_wifi() {
  delay(10);
  Serial.println();
  Serial.print("Connecting to ");
  Serial.println(ssid);
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("");
  Serial.println("WiFi connected");
  Serial.println("IP address: ");
  Serial.println(WiFi.localIP());
}

void reconnect() {
  while (!client.connected()) {
    Serial.print("Attempting MQTT connection...");
    if (client.connect("ESP32_TOA", "", "" )) {
      Serial.println("mqtt connected");
      client.subscribe("master/toa");
    } else {
      Serial.print("failed, rc=");
      Serial.print(client.state());
      Serial.println(" try again in 5 seconds");
      delay(5000);
    }
  }
}

void callback(char* topic, byte* payload, unsigned int length) {
  Serial.print("MQTT: topic=");
  Serial.println(topic);
  payload[length] = 0;
  Serial.print("MQTT: payload=");
  Serial.println((char*)payload);

  if (strcmp(topic, "master/toa") == 0) {
    if (payload[0] == '0') {  
      digitalWrite(2, LOW);  // ดับไฟ
      client.publish("init_revert", "0");
      Serial.println("OFF");
    }
    if (payload[0] == '1') {  
      digitalWrite(2, HIGH);  // ไฟติด
      client.publish("init_revert", "1");
      Serial.println("ON");
    }
  }
}
